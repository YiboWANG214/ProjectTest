ID,PROMPT_ID,DURATION,FINISH_REASON,ORIGINAL_CODE,TEST_PROMPT,GENERATED_TEST
chatcmpl-B2mjMwb0FlCx3zYuQDXo0pJrbukqJ,./ProjectTest/Python/uno.py,14.152941465377808,stop,"'''
uno/player.py
'''

class UnoPlayer:

    def __init__(self, player_id, np_random):
        ''' Initilize a player.

        Args:
            player_id (int): The id of the player
        '''
        self.np_random = np_random
        self.player_id = player_id
        self.hand = []
        self.stack = []

    def get_player_id(self):
        ''' Return the id of the player
        '''

        return self.player_id


'''
uno/dealer.py
'''

from utils import init_deck


class UnoDealer:
    ''' Initialize a uno dealer class
    '''
    def __init__(self, np_random):
        self.np_random = np_random
        self.deck = init_deck()
        self.shuffle()

    def shuffle(self):
        ''' Shuffle the deck
        '''
        self.np_random.shuffle(self.deck)

    def deal_cards(self, player, num):
        ''' Deal some cards from deck to one player

        Args:
            player (object): The object of DoudizhuPlayer
            num (int): The number of cards to be dealed
        '''
        for _ in range(num):
            player.hand.append(self.deck.pop())

    def flip_top_card(self):
        ''' Flip top card when a new game starts

        Returns:
            (object): The object of UnoCard at the top of the deck
        '''
        top_card = self.deck.pop()
        while top_card.trait == 'wild_draw_4':
            self.deck.append(top_card)
            self.shuffle()
            top_card = self.deck.pop()
        return top_card


'''
uno/card.py
'''
from termcolor import colored

class UnoCard:

    info = {'type':  ['number', 'action', 'wild'],
            'color': ['r', 'g', 'b', 'y'],
            'trait': ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
                      'skip', 'reverse', 'draw_2', 'wild', 'wild_draw_4']
            }

    def __init__(self, card_type, color, trait):
        ''' Initialize the class of UnoCard

        Args:
            card_type (str): The type of card
            color (str): The color of card
            trait (str): The trait of card
        '''
        self.type = card_type
        self.color = color
        self.trait = trait
        self.str = self.get_str()

    def get_str(self):
        ''' Get the string representation of card

        Return:
            (str): The string of card's color and trait
        '''
        return self.color + '-' + self.trait


    @staticmethod
    def print_cards(cards, wild_color=False):
        ''' Print out card in a nice form

        Args:
            card (str or list): The string form or a list of a UNO card
            wild_color (boolean): True if assign collor to wild cards
        '''
        if isinstance(cards, str):
            cards = [cards]
        for i, card in enumerate(cards):
            if card == 'draw':
                trait = 'Draw'
            else:
                color, trait = card.split('-')
                if trait == 'skip':
                    trait = 'Skip'
                elif trait == 'reverse':
                    trait = 'Reverse'
                elif trait == 'draw_2':
                    trait = 'Draw-2'
                elif trait == 'wild':
                    trait = 'Wild'
                elif trait == 'wild_draw_4':
                    trait = 'Wild-Draw-4'

            if trait == 'Draw' or (trait[:4] == 'Wild' and not wild_color):
                print(trait, end='')
            elif color == 'r':
                print(colored(trait, 'red'), end='')
            elif color == 'g':
                print(colored(trait, 'green'), end='')
            elif color == 'b':
                print(colored(trait, 'blue'), end='')
            elif color == 'y':
                print(colored(trait, 'yellow'), end='')

            if i < len(cards) - 1:
                print(', ', end='')


'''
uno/judger.py
'''

class UnoJudger:

    @staticmethod
    def judge_winner(players, np_random):
        ''' Judge the winner of the game

        Args:
            players (list): The list of players who play the game

        Returns:
            (list): The player id of the winner
        '''
        count_1 = len(players[0].hand)
        count_2 = len(players[1].hand)
        if count_1 == count_2:
            return [0, 1]
        if count_1 < count_2:
            return [0]
        return [1]


'''
uno/game.py
'''
from copy import deepcopy
import numpy as np

from uno import Dealer
from uno import Player
from uno import Round


class UnoGame:

    def __init__(self, allow_step_back=False, num_players=2):
        self.allow_step_back = allow_step_back
        self.np_random = np.random.RandomState()
        self.num_players = num_players
        self.payoffs = [0 for _ in range(self.num_players)]

    def configure(self, game_config):
        ''' Specifiy some game specific parameters, such as number of players
        '''
        self.num_players = game_config['game_num_players']

    def init_game(self):
        ''' Initialize players and state

        Returns:
            (tuple): Tuple containing:

                (dict): The first state in one game
                (int): Current player's id
        '''
        # Initalize payoffs
        self.payoffs = [0 for _ in range(self.num_players)]

        # Initialize a dealer that can deal cards
        self.dealer = Dealer(self.np_random)

        # Initialize four players to play the game
        self.players = [Player(i, self.np_random) for i in range(self.num_players)]

        # Deal 7 cards to each player to prepare for the game
        for player in self.players:
            self.dealer.deal_cards(player, 7)

        # Initialize a Round
        self.round = Round(self.dealer, self.num_players, self.np_random)

        # flip and perfrom top card
        top_card = self.round.flip_top_card()
        self.round.perform_top_card(self.players, top_card)

        # Save the hisory for stepping back to the last state.
        self.history = []

        player_id = self.round.current_player
        state = self.get_state(player_id)
        return state, player_id

    def step(self, action):
        ''' Get the next state

        Args:
            action (str): A specific action

        Returns:
            (tuple): Tuple containing:

                (dict): next player's state
                (int): next plater's id
        '''

        if self.allow_step_back:
            # First snapshot the current state
            his_dealer = deepcopy(self.dealer)
            his_round = deepcopy(self.round)
            his_players = deepcopy(self.players)
            self.history.append((his_dealer, his_players, his_round))

        self.round.proceed_round(self.players, action)
        player_id = self.round.current_player
        state = self.get_state(player_id)
        return state, player_id

    def step_back(self):
        ''' Return to the previous state of the game

        Returns:
            (bool): True if the game steps back successfully
        '''
        if not self.history:
            return False
        self.dealer, self.players, self.round = self.history.pop()
        return True

    def get_state(self, player_id):
        ''' Return player's state

        Args:
            player_id (int): player id

        Returns:
            (dict): The state of the player
        '''
        state = self.round.get_state(self.players, player_id)
        state['num_players'] = self.get_num_players()
        state['current_player'] = self.round.current_player
        return state

    def get_payoffs(self):
        ''' Return the payoffs of the game

        Returns:
            (list): Each entry corresponds to the payoff of one player
        '''
        winner = self.round.winner
        if winner is not None and len(winner) == 1:
            self.payoffs[winner[0]] = 1
            self.payoffs[1 - winner[0]] = -1
        return self.payoffs

    def get_legal_actions(self):
        ''' Return the legal actions for current player

        Returns:
            (list): A list of legal actions
        '''

        return self.round.get_legal_actions(self.players, self.round.current_player)

    def get_num_players(self):
        ''' Return the number of players in Limit Texas Hold'em

        Returns:
            (int): The number of players in the game
        '''
        return self.num_players

    @staticmethod
    def get_num_actions():
        ''' Return the number of applicable actions

        Returns:
            (int): The number of actions. There are 61 actions
        '''
        return 61

    def get_player_id(self):
        ''' Return the current player's id

        Returns:
            (int): current player's id
        '''
        return self.round.current_player

    def is_over(self):
        ''' Check if the game is over

        Returns:
            (boolean): True if the game is over
        '''
        return self.round.is_over


'''
uno/utils.py
'''
import os
import json
import numpy as np
from collections import OrderedDict

import rlcard

from uno.card import UnoCard as Card

# Read required docs
ROOT_PATH = rlcard.__path__[0]

# a map of abstract action to its index and a list of abstract action
with open(os.path.join(ROOT_PATH, 'games/uno/jsondata/action_space.json'), 'r') as file:
    ACTION_SPACE = json.load(file, object_pairs_hook=OrderedDict)
    ACTION_LIST = list(ACTION_SPACE.keys())

# a map of color to its index
COLOR_MAP = {'r': 0, 'g': 1, 'b': 2, 'y': 3}

# a map of trait to its index
TRAIT_MAP = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7,
             '8': 8, '9': 9, 'skip': 10, 'reverse': 11, 'draw_2': 12,
             'wild': 13, 'wild_draw_4': 14}

WILD = ['r-wild', 'g-wild', 'b-wild', 'y-wild']

WILD_DRAW_4 = ['r-wild_draw_4', 'g-wild_draw_4', 'b-wild_draw_4', 'y-wild_draw_4']


def init_deck():
    ''' Generate uno deck of 108 cards
    '''
    deck = []
    card_info = Card.info
    for color in card_info['color']:

        # init number cards
        for num in card_info['trait'][:10]:
            deck.append(Card('number', color, num))
            if num != '0':
                deck.append(Card('number', color, num))

        # init action cards
        for action in card_info['trait'][10:13]:
            deck.append(Card('action', color, action))
            deck.append(Card('action', color, action))

        # init wild cards
        for wild in card_info['trait'][-2:]:
            deck.append(Card('wild', color, wild))
    return deck


def cards2list(cards):
    ''' Get the corresponding string representation of cards

    Args:
        cards (list): list of UnoCards objects

    Returns:
        (string): string representation of cards
    '''
    cards_list = []
    for card in cards:
        cards_list.append(card.get_str())
    return cards_list

def hand2dict(hand):
    ''' Get the corresponding dict representation of hand

    Args:
        hand (list): list of string of hand's card

    Returns:
        (dict): dict of hand
    '''
    hand_dict = {}
    for card in hand:
        if card not in hand_dict:
            hand_dict[card] = 1
        else:
            hand_dict[card] += 1
    return hand_dict

def encode_hand(plane, hand):
    ''' Encode hand and represerve it into plane

    Args:
        plane (array): 3*4*15 numpy array
        hand (list): list of string of hand's card

    Returns:
        (array): 3*4*15 numpy array
    '''
    # plane = np.zeros((3, 4, 15), dtype=int)
    plane[0] = np.ones((4, 15), dtype=int)
    hand = hand2dict(hand)
    for card, count in hand.items():
        card_info = card.split('-')
        color = COLOR_MAP[card_info[0]]
        trait = TRAIT_MAP[card_info[1]]
        if trait >= 13:
            if plane[1][0][trait] == 0:
                for index in range(4):
                    plane[0][index][trait] = 0
                    plane[1][index][trait] = 1
        else:
            plane[0][color][trait] = 0
            plane[count][color][trait] = 1
    return plane

def encode_target(plane, target):
    ''' Encode target and represerve it into plane

    Args:
        plane (array): 1*4*15 numpy array
        target(str): string of target card

    Returns:
        (array): 1*4*15 numpy array
    '''
    target_info = target.split('-')
    color = COLOR_MAP[target_info[0]]
    trait = TRAIT_MAP[target_info[1]]
    plane[color][trait] = 1
    return plane


'''
uno/__init__.py
'''
from uno.dealer import UnoDealer as Dealer
from uno.judger import UnoJudger as Judger
from uno.player import UnoPlayer as Player
from uno.round import UnoRound as Round
from uno.game import UnoGame as Game



'''
uno/round.py
'''
from card import UnoCard
from utils import cards2list, WILD, WILD_DRAW_4


class UnoRound:

    def __init__(self, dealer, num_players, np_random):
        ''' Initialize the round class

        Args:
            dealer (object): the object of UnoDealer
            num_players (int): the number of players in game
        '''
        self.np_random = np_random
        self.dealer = dealer
        self.target = None
        self.current_player = 0
        self.num_players = num_players
        self.direction = 1
        self.played_cards = []
        self.is_over = False
        self.winner = None

    def flip_top_card(self):
        ''' Flip the top card of the card pile

        Returns:
            (object of UnoCard): the top card in game

        '''
        top = self.dealer.flip_top_card()
        if top.trait == 'wild':
            top.color = self.np_random.choice(UnoCard.info['color'])
        self.target = top
        self.played_cards.append(top)
        return top

    def perform_top_card(self, players, top_card):
        ''' Perform the top card

        Args:
            players (list): list of UnoPlayer objects
            top_card (object): object of UnoCard
        '''
        if top_card.trait == 'skip':
            self.current_player = 1
        elif top_card.trait == 'reverse':
            self.direction = -1
            self.current_player = (0 + self.direction) % self.num_players
        elif top_card.trait == 'draw_2':
            player = players[self.current_player]
            self.dealer.deal_cards(player, 2)

    def proceed_round(self, players, action):
        ''' Call other Classes' functions to keep one round running

        Args:
            player (object): object of UnoPlayer
            action (str): string of legal action
        '''
        if action == 'draw':
            self._perform_draw_action(players)
            return None
        player = players[self.current_player]
        card_info = action.split('-')
        color = card_info[0]
        trait = card_info[1]
        # remove corresponding card
        remove_index = None
        if trait == 'wild' or trait == 'wild_draw_4':
            for index, card in enumerate(player.hand):
                if trait == card.trait:
                    card.color = color # update the color of wild card to match the action
                    remove_index = index
                    break
        else:
            for index, card in enumerate(player.hand):
                if color == card.color and trait == card.trait:
                    remove_index = index
                    break
        card = player.hand.pop(remove_index)
        if not player.hand:
            self.is_over = True
            self.winner = [self.current_player]
        self.played_cards.append(card)

        # perform the number action
        if card.type == 'number':
            self.current_player = (self.current_player + self.direction) % self.num_players
            self.target = card

        # perform non-number action
        else:
            self._preform_non_number_action(players, card)

    def get_legal_actions(self, players, player_id):
        wild_flag = 0
        wild_draw_4_flag = 0
        legal_actions = []
        wild_4_actions = []
        hand = players[player_id].hand
        target = self.target
        if target.type == 'wild':
            for card in hand:
                if card.type == 'wild':
                    if card.trait == 'wild_draw_4':
                        if wild_draw_4_flag == 0:
                            wild_draw_4_flag = 1
                            wild_4_actions.extend(WILD_DRAW_4)
                    else:
                        if wild_flag == 0:
                            wild_flag = 1
                            legal_actions.extend(WILD)
                elif card.color == target.color:
                    legal_actions.append(card.str)

        # target is aciton card or number card
        else:
            for card in hand:
                if card.type == 'wild':
                    if card.trait == 'wild_draw_4':
                        if wild_draw_4_flag == 0:
                            wild_draw_4_flag = 1
                            wild_4_actions.extend(WILD_DRAW_4)
                    else:
                        if wild_flag == 0:
                            wild_flag = 1
                            legal_actions.extend(WILD)
                elif card.color == target.color or card.trait == target.trait:
                    legal_actions.append(card.str)
        if not legal_actions:
            legal_actions = wild_4_actions
        if not legal_actions:
            legal_actions = ['draw']
        return legal_actions

    def get_state(self, players, player_id):
        ''' Get player's state

        Args:
            players (list): The list of UnoPlayer
            player_id (int): The id of the player
        '''
        state = {}
        player = players[player_id]
        state['hand'] = cards2list(player.hand)
        state['target'] = self.target.str
        state['played_cards'] = cards2list(self.played_cards)
        state['legal_actions'] = self.get_legal_actions(players, player_id)
        state['num_cards'] = []
        for player in players:
            state['num_cards'].append(len(player.hand))
        return state

    def replace_deck(self):
        ''' Add cards have been played to deck
        '''
        self.dealer.deck.extend(self.played_cards)
        self.dealer.shuffle()
        self.played_cards = []

    def _perform_draw_action(self, players):
        # replace deck if there is no card in draw pile
        if not self.dealer.deck:
            self.replace_deck()
            #self.is_over = True
            #self.winner = UnoJudger.judge_winner(players)
            #return None

        card = self.dealer.deck.pop()

        # draw a wild card
        if card.type == 'wild':
            card.color = self.np_random.choice(UnoCard.info['color'])
            self.target = card
            self.played_cards.append(card)
            self.current_player = (self.current_player + self.direction) % self.num_players

        # draw a card with the same color of target
        elif card.color == self.target.color:
            if card.type == 'number':
                self.target = card
                self.played_cards.append(card)
                self.current_player = (self.current_player + self.direction) % self.num_players
            else:
                self.played_cards.append(card)
                self._preform_non_number_action(players, card)

        # draw a card with the diffrent color of target
        else:
            players[self.current_player].hand.append(card)
            self.current_player = (self.current_player + self.direction) % self.num_players

    def _preform_non_number_action(self, players, card):
        current = self.current_player
        direction = self.direction
        num_players = self.num_players

        # perform reverse card
        if card.trait == 'reverse':
            self.direction = -1 * direction

        # perfrom skip card
        elif card.trait == 'skip':
            current = (current + direction) % num_players

        # perform draw_2 card
        elif card.trait == 'draw_2':
            if len(self.dealer.deck) < 2:
                self.replace_deck()
                #self.is_over = True
                #self.winner = UnoJudger.judge_winner(players)
                #return None
            self.dealer.deal_cards(players[(current + direction) % num_players], 2)
            current = (current + direction) % num_players

        # perfrom wild_draw_4 card
        elif card.trait == 'wild_draw_4':
            if len(self.dealer.deck) < 4:
                self.replace_deck()
                #self.is_over = True
                #self.winner = UnoJudger.judge_winner(players)
                #return None
            self.dealer.deal_cards(players[(current + direction) % num_players], 4)
            current = (current + direction) % num_players
        self.current_player = (current + self.direction) % num_players
        self.target = card


","Please generate enough unit test cases for each python file in the uno project. Ensure that the import path is correct, depending on whether the project is structured as a package. Make sure the tests can successfully compile. Make sure the tests have correct results. Try to achieve the highest coverage rate. 

","```python
# test_uno_round.py

import unittest
from uno.round import UnoRound
from uno.card import UnoCard

class TestUnoRound(unittest.TestCase):

    def setUp(self):
        self.round = UnoRound(None, 2, np_random=None)
        self.players = [UnoPlayer(0, np_random=None), UnoPlayer(1, np_random=None)]

    def test_flip_top_card(self):
        top_card = self.round.flip_top_card()
        self.assertIsInstance(top_card, UnoCard)

    def test_perform_top_card(self):
        top_card = UnoCard('number', 'r', '3')
        self.round.perform_top_card(self.players, top_card)
        self.assertEqual(self.round.current_player, 1)
        self.assertEqual(self.round.direction, 1)

    def test_proceed_round(self):
        top_card = UnoCard('number', 'r', '3')
        self.round.target = top_card
        self.round.current_player = 0
        self.round.proceed_round(self.players, 'r-3')
        self.assertEqual(self.round.current_player, 1)

    def test_get_legal_actions(self):
        top_card = UnoCard('number', 'r', '3')
        self.round.target = top_card
        self.players[0].hand = [UnoCard('number', 'r', '2')]
        legal_actions = self.round.get_legal_actions(self.players, 0)
        self.assertListEqual(legal_actions, ['r-2'])

    def test_get_state(self):
        top_card = UnoCard('number', 'r', '3')
        self.round.target = top_card
        self.players[0].hand = [UnoCard('number', 'r', '2')]
        state = self.round.get_state(self.players, 0)
        self.assertIn('hand', state)
        self.assertIn('target', state)
        self.assertIn('played_cards', state)
        self.assertIn('legal_actions', state)
        self.assertIn('num_cards', state)

if __name__ == '__main__':
    unittest.main()
```

```python
# test_uno_dealer.py

import unittest
from uno.dealer import UnoDealer

class TestUnoDealer(unittest.TestCase):

    def setUp(self):
        self.dealer = UnoDealer(np_random=None)

    def test_shuffle(self):
        deck_before = self.dealer.deck[:]
        self.dealer.shuffle()
        deck_after = self.dealer.deck
        self.assertNotEqual(deck_before, deck_after)

    def test_deal_cards(self):
        player = UnoPlayer(0, np_random=None)
        num = 3
        self.dealer.deal_cards(player, num)
        self.assertEqual(len(player.hand), num)

    def test_flip_top_card(self):
        top_card = self.dealer.flip_top_card()
        self.assertIsNotNone(top_card)

if __name__ == '__main__':
    unittest.main()
```

```python
# test_uno_player.py

import unittest
from uno.player import UnoPlayer

class TestUnoPlayer(unittest.TestCase):

    def setUp(self):
        self.player = UnoPlayer(0, np_random=None)

    def test_get_player_id(self):
        player_id = self.player.get_player_id()
        self.assertEqual(player_id, 0)

if __name__ == '__main__':
    unittest.main()
```

```python
# test_uno_game.py

import unittest
from uno.game import UnoGame

class TestUnoGame(unittest.TestCase):

    def setUp(self):
        self.game = UnoGame(allow_step_back=False, num_players=2)

    def test_configure(self):
        game_config = {'game_num_players': 2}
        self.game.configure(game_config)
        self.assertEqual(self.game.num_players, 2)

    def test_get_num_players(self):
        num_players = self.game.get_num_players()
        self.assertEqual(num_players, 2)

    def test_get_num_actions(self):
        num_actions = UnoGame.get_num_actions()
        self.assertEqual(num_actions, 61)

    def test_get_legal_actions(self):
        legal_actions = self.game.get_legal_actions()
        self.assertIsInstance(legal_actions, list)

if __name__ == '__main__':
    unittest.main()
```

```python
# test_uno_judger.py

import unittest
from uno.judger import UnoJudger

class TestUnoJudger(unittest.TestCase):

    def setUp(self):
        self.players = [UnoPlayer(0, np_random=None), UnoPlayer(1, np_random=None)]

    def test_judge_winner(self):
        np_random = None
        winner = UnoJudger.judge_winner(self.players, np_random)
        self.assertIsInstance(winner, list)

if __name__ == '__main__':
    unittest.main()
```

```python
# test_uno_card.py

import unittest
from uno.card import UnoCard

class TestUnoCard(unittest.TestCase):

    def test_get_str(self):
        card = UnoCard('number', 'r', '3')
        card_str = card.get_str()
        self.assertEqual(card_str, 'r-3')

    def test_print_cards(self):
        cards = ['r-0', 'g-skip']
        UnoCard.print_cards(cards, wild_color=False)

if __name__ == '__main__':
    unittest.main()
```

```python
# test_uno_utils.py

import unittest
from uno.utils import init_deck, cards2list, hand2dict, encode_hand, encode_target

class TestUtils(unittest.TestCase):

    def test_init_deck(self):
        deck = init_deck()
        self.assertEqual(len(deck), 108)

    def test_cards2list(self):
        hand = ['r-0', 'g-3']
        cards_list = cards2list(hand)
        self.assertIsInstance(cards_list, list)

    def test_hand2dict(self):
        hand = ['r-0', 'g-3']
        hand_dict = hand2dict(hand)
        self.assertIsInstance(hand_dict, dict)

    def test_encode_hand(self):
        hand = ['r-0', 'g-3']
        plane = encode_hand(np.zeros((3, 4, 15), dtype=int), hand)
        self.assertIsInstance(plane, np.ndarray)

    def test_encode_target(self):
        target = 'r-0'
        plane = encode_target(np.zeros((1, 4, 15), dtype=int), target)
        self.assertIsInstance(plane, np.ndarray)

if __name__ == '__main__':
    unittest.main()
```

```python
# test_uno_init.py

import unittest
from uno import Dealer, Judger, Player, Round, Game

class TestUnoInit(unittest.TestCase):

    def test_imports(self):
        self.assertTrue(Dealer)
        self.assertTrue(Judger)
        self.assertTrue(Player)
        self.assertTrue(Round)
        self.assertTrue(Game)

if __name__ == '__main__':
    unittest.main()
```"
